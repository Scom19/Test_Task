import random
import math
from abc import ABC, abstractmethod


class task(ABC):
    """
    –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏.
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–±—â–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏.   
    """

    def __init__(self, difficulty):
        if difficulty not in [1, 2, 3]:
            raise ValueError("–£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1, 2 –∏–ª–∏ 3.")
        self.difficulty = difficulty
        self.prompt_text = ""
        self.solution = None
        self.explanation = ""
        self.hint = ""
        self.generate()

    @abstractmethod
    def generate(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–¥–∞—á–∏, —Ç–µ–∫—Å—Ç, —Ä–µ—à–µ–Ω–∏–µ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ."""
        pass

    def get_prompt(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        return self.prompt_text

    def check_answer(self, user_answer):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (bool, str).
        –ë–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.
        """
        user_answer_cleaned = str(user_answer).strip().replace(" ", "")
        solution_cleaned = str(self.solution).strip().replace(" ", "")

        if user_answer_cleaned == solution_cleaned:
            return True, "üéâ –í–µ—Ä–Ω–æ!"

        # –ê–Ω–∞–ª–∏–∑ –æ–±—â–∏—Ö –æ—à–∏–±–æ–∫
        if user_answer_cleaned.startswith("-") and not solution_cleaned.startswith("-"):
            hint = "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–Ω–∞–∫–∏!"
        elif not user_answer_cleaned.startswith("-") and solution_cleaned.startswith("-"):
            hint = "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–Ω–∞–∫–∏!"
        else:
            hint = f"–ü–æ–¥—Å–∫–∞–∑–∫–∞: {self.explanation}"

        error_message = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ.\n   –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {self.solution}\n   {hint}"
        return False, error_message


class Derivativetask(task):
    """–ó–∞–¥–∞—á–∞: –ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏."""

    def generate(self):
        if self.difficulty == 1:
            # f(x) = a*x + b
            a = random.randint(2, 10)
            b = random.randint(1, 10)
            self.prompt_text = f"–ù–∞–π–¥–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–∏ f(x) = {a}*x + {b}"
            self.solution = str(a)
            self.hint = f"–í—Å–ø–æ–º–Ω–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–æ: –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è –æ—Ç ax + b —Ä–∞–≤–Ω–∞ a"
            self.explanation = f"–ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è –æ—Ç –ª–∏–Ω–µ–π–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ f(x) = ax + b —Ä–∞–≤–Ω–∞ 'a'"

        elif self.difficulty == 2:
            # f(x) = a * x^b
            a = random.randint(2, 5)
            b = random.randint(2, 5)
            self.prompt_text = f"–ù–∞–π–¥–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–∏ f(x) = {a}*x^{b}"
            self.solution = f"{a * b}*x^{b - 1}"
            self.hint = "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª–æ —Å—Ç–µ–ø–µ–Ω–∏: (C*x^n)' = C*n*x^(n-1)"
            self.explanation = "–ü—Ä–∏–º–µ–Ω–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–æ —Å—Ç–µ–ø–µ–Ω–∏: (C*x^n)' = C*n*x^(n-1). –£–º–Ω–æ–∂—å—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –Ω–∞ —Å—Ç–µ–ø–µ–Ω—å –∏ —É–º–µ–Ω—å—à–∏—Ç–µ —Å—Ç–µ–ø–µ–Ω—å –Ω–∞ 1."

        elif self.difficulty == 3:
            # f(x) = a * sin(b*x + c) –∏–ª–∏ f(x) = a * cos(b*x + c)
            a = random.randint(2, 5) * random.choice([-1, 1])
            b = random.randint(2, 5)
            c = random.randint(1, 5)
            trig_func = random.choice(['sin', 'cos'])
            
            if trig_func == 'sin':
                self.prompt_text = f"–ù–∞–π–¥–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–∏ f(x) = {a}*sin({b}*x + {c})\n(–æ—Ç–≤–µ—Ç –¥–∞–π—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 10*cos(2*x+3))"
                self.solution = f"{a * b}*cos({b}*x+{c})"
                self.hint = "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª–æ —Ü–µ–ø–æ—á–∫–∏ –∏ –ø–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è –æ—Ç sin(u) —Ä–∞–≤–Ω–∞ cos(u)*u'"
                self.explanation = "–ü—Ä–∏–º–µ–Ω–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–æ —Ü–µ–ø–æ—á–∫–∏ (f(g(x)))' = f'(g(x))*g'(x). –ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è –æ—Ç sin(u) —Ä–∞–≤–Ω–∞ cos(u)*u'. –ó–¥–µ—Å—å u = bx + c, –ø–æ—ç—Ç–æ–º—É u' = b."
            else:  # cos
                self.prompt_text = f"–ù–∞–π–¥–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–∏ f(x) = {a}*cos({b}*x + {c})\n(–æ—Ç–≤–µ—Ç –¥–∞–π—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: -10*sin(2*x+3))"
                self.solution = f"{-a * b}*sin({b}*x+{c})"
                self.hint = "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª–æ —Ü–µ–ø–æ—á–∫–∏ –∏ –ø–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è –æ—Ç cos(u) —Ä–∞–≤–Ω–∞ -sin(u)*u'"
                self.explanation = "–ü—Ä–∏–º–µ–Ω–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–æ —Ü–µ–ø–æ—á–∫–∏ (f(g(x)))' = f'(g(x))*g'(x). –ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è –æ—Ç cos(u) —Ä–∞–≤–Ω–∞ -sin(u)*u'. –ó–¥–µ—Å—å u = bx + c, –ø–æ—ç—Ç–æ–º—É u' = b."

    def check_answer(self, user_answer):
        """–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã—Ö, –ø—Ä–∏–Ω–∏–º–∞—é—â–∞—è —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∑–∞–ø–∏—Å–∏."""
        user_answer_cleaned = str(user_answer).strip().replace(" ", "")
        solution_cleaned = str(self.solution).strip().replace(" ", "")
        
        # –ü—Ä—è–º–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
        if user_answer_cleaned == solution_cleaned:
            return True, "üéâ –í–µ—Ä–Ω–æ!"
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        def normalize_expression(expr):
            """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è."""
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
            expr = expr.lower().replace(" ", "")
            
            # –ó–∞–º–µ–Ω—è–µ–º x^1 –Ω–∞ x (—Å—Ç–µ–ø–µ–Ω—å 1 –º–æ–∂–Ω–æ –æ–ø—É—Å—Ç–∏—Ç—å)
            expr = expr.replace("^1", "")
            
            # –ó–∞–º–µ–Ω—è–µ–º *x –Ω–∞ x (—É–º–Ω–æ–∂–µ–Ω–∏–µ –Ω–∞ x –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å –±–µ–∑ *)
            expr = expr.replace("*x", "x")
            
            # –ó–∞–º–µ–Ω—è–µ–º x* –Ω–∞ x (x –≤ –Ω–∞—á–∞–ª–µ –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å –±–µ–∑ *)
            if expr.startswith("x*"):
                expr = expr[1:]
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–∏ —Ç–∏–ø–∞ 6x -> 6*x
            import re
            # –ù–∞—Ö–æ–¥–∏–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ç–∏–ø–∞ "—á–∏—Å–ª–æx" –∏ –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ "—á–∏—Å–ª–æ*x"
            expr = re.sub(r'(\d+)x', r'\1*x', expr)
            
            return expr
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
        user_normalized = normalize_expression(user_answer_cleaned)
        solution_normalized = normalize_expression(solution_cleaned)
        
        if user_normalized == solution_normalized:
            return True, "üéâ –í–µ—Ä–Ω–æ!"
        
        # –ê–Ω–∞–ª–∏–∑ –æ–±—â–∏—Ö –æ—à–∏–±–æ–∫
        if user_answer_cleaned.startswith("-") and not solution_cleaned.startswith("-"):
            hint = "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ª–∏—à–Ω–∏–π –º–∏–Ω—É—Å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–Ω–∞–∫–∏."
        elif not user_answer_cleaned.startswith("-") and solution_cleaned.startswith("-"):
            hint = "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ö–∞–∂–µ—Ç—Å—è, –≤—ã –∑–∞–±—ã–ª–∏ –º–∏–Ω—É—Å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–Ω–∞–∫–∏."
        else:
            hint = f"–ü–æ–¥—Å–∫–∞–∑–∫–∞: {self.explanation}"

        error_message = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ.\n   –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {self.solution}\n   {hint}"
        return False, error_message


class LinearSystemtask(task):
    """–ó–∞–¥–∞—á–∞: –†–µ—à–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º –ª–∏–Ω–µ–π–Ω—ã—Ö —É—Ä–∞–≤–Ω–µ–Ω–∏–π."""

    def generate(self):
        if self.difficulty == 1:
            # ax + b = c
            a = random.randint(2, 10)
            x = random.randint(-10, 10)
            b = random.randint(-20, 20)
            c = a * x + b
            self.prompt_text = f"–†–µ—à–∏—Ç–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: {a}x + {b} = {c}"
            self.solution = str(x)
            self.hint = f"–ü–µ—Ä–µ–Ω–µ—Å–∏—Ç–µ {b} –≤ –ø—Ä–∞–≤—É—é —á–∞—Å—Ç—å –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ –Ω–∞ {a}"
            self.explanation = f"–ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ x, –ø–µ—Ä–µ–Ω–µ—Å–∏—Ç–µ {b} –≤ –ø—Ä–∞–≤—É—é —á–∞—Å—Ç—å (–ø–æ–ª—É—á–∏—Ç—Å—è {c - b}) –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ –≤—Å—ë –Ω–∞ {a}. x = ({c - b}) / {a} = {x}."
        else:
            x, y = random.randint(-5, 5), random.randint(-5, 5)
            coeff_range = (1, 5) if self.difficulty == 2 else (2, 10)
            a1, b1, a2, b2 = [random.randint(*coeff_range) for _ in range(4)]

            while a1 * b2 - a2 * b1 == 0:  # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å —Ä–µ—à–µ–Ω–∏—è
                a2, b2 = random.randint(*coeff_range), random.randint(*coeff_range)

            c1 = a1 * x + b1 * y
            c2 = a2 * x + b2 * y
            self.prompt_text = (f"–†–µ—à–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É —É—Ä–∞–≤–Ω–µ–Ω–∏–π –∏ –≤–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è x –∏ y —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5,-3):\n"
                                f"  {a1}x + {b1}y = {c1}\n"
                                f"  {a2}x + {b2}y = {c2}")
            self.solution = f"{x},{y}"
            self.hint = "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ—Ç–æ–¥ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–ª–∏ —Å–ª–æ–∂–µ–Ω–∏—è —É—Ä–∞–≤–Ω–µ–Ω–∏–π"
            self.explanation = "–°–∏—Å—Ç–µ–º—É –º–æ–∂–Ω–æ —Ä–µ—à–∏—Ç—å –º–µ—Ç–æ–¥–æ–º –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–ª–∏ —Å–ª–æ–∂–µ–Ω–∏—è. –í—ã—Ä–∞–∑–∏—Ç–µ –æ–¥–Ω—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —á–µ—Ä–µ–∑ –¥—Ä—É–≥—É—é –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —É—Ä–∞–≤–Ω–µ–Ω–∏—è –∏ –ø–æ–¥—Å—Ç–∞–≤—å—Ç–µ –≤–æ –≤—Ç–æ—Ä–æ–µ."

    def check_answer(self, user_answer):
        """–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º, —á—Ç–æ–±—ã –ª–æ–≤–∏—Ç—å –ø–µ—Ä–µ–ø—É—Ç–∞–Ω–Ω—ã–µ x –∏ y."""
        user_answer_cleaned = str(user_answer).strip().replace(" ", "")
        if user_answer_cleaned == self.solution:
            return True, "üéâ –í–µ—Ä–Ω–æ!"

        hint = f"–ü–æ–¥—Å–∫–∞–∑–∫–∞: {self.explanation}"
        # –ü–æ–ø—ã—Ç–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–∏–ø–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫ –¥–ª—è —Å–∏—Å—Ç–µ–º
        try:
            user_x, user_y = map(int, user_answer_cleaned.split(','))
            sol_x, sol_y = map(int, self.solution.split(','))

            if user_x == sol_y and user_y == sol_x:
                hint = "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ü–æ—Ö–æ–∂–µ, –≤—ã –ø–µ—Ä–µ–ø—É—Ç–∞–ª–∏ –º–µ—Å—Ç–∞–º–∏ x –∏ y. –û—Ç–≤–µ—Ç –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'x,y'."
            elif user_x == sol_x and user_y != sol_y:
                hint = "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: 'x' –Ω–∞–π–¥–µ–Ω –≤–µ—Ä–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –¥–ª—è 'y'."
            elif user_x != sol_x and user_y == sol_y:
                hint = "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: 'y' –Ω–∞–π–¥–µ–Ω –≤–µ—Ä–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –¥–ª—è 'x'."
        except (ValueError, IndexError):
            pass  # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–µ '—á–∏—Å–ª–æ,—á–∏—Å–ª–æ', –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É

        error_message = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ.\n   –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {self.solution}\n   {hint}"
        return False, error_message


class Probabilitytask(task):
    """–ó–∞–¥–∞—á–∞: –¢–µ–æ—Ä–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π."""

    def generate(self):
        if self.difficulty == 1:
            total = random.randint(10, 20)
            success = random.randint(2, total - 2)
            self.prompt_text = f"–í –∫–æ—Ä–∑–∏–Ω–µ {total} —à–∞—Ä–æ–≤, –∏–∑ –Ω–∏—Ö {success} –∫—Ä–∞—Å–Ω—ã—Ö. –ö–∞–∫–æ–≤–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–Ω—É—Ç—å –∫—Ä–∞—Å–Ω—ã–π —à–∞—Ä? (–æ—Ç–≤–µ—Ç –æ–∫—Ä—É–≥–ª–∏—Ç–µ –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π)"
            self.solution = str(round(success / total, 2))
            self.hint = "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å = (–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö –∏—Å—Ö–æ–¥–æ–≤) / (–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å—Ö–æ–¥–æ–≤)"
            self.explanation = f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å = {success} / {total} = {round(success / total, 2)}. –≠—Ç–æ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫—Ä–∞—Å–Ω—ã—Ö —à–∞—Ä–æ–≤ –∫ –æ–±—â–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —à–∞—Ä–æ–≤."
        elif self.difficulty == 2:
            sides = 6
            outcome = random.randint(1, 6)
            self.prompt_text = f"–ò–≥—Ä–∞–ª—å–Ω—ã–π –∫—É–±–∏–∫ (6 –≥—Ä–∞–Ω–µ–π) –±—Ä–æ—Å–∞—é—Ç –¥–≤–∞–∂–¥—ã. –ö–∞–∫–æ–≤–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å, —á—Ç–æ –æ–±–∞ —Ä–∞–∑–∞ –≤—ã–ø–∞–¥–µ—Ç —á–∏—Å–ª–æ {outcome}? (–æ—Ç–≤–µ—Ç –æ–∫—Ä—É–≥–ª–∏—Ç–µ –¥–æ 3 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π)"
            self.solution = str(round((1 / sides) * (1 / sides), 3))
            self.hint = "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–≤—É—Ö –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã—Ö —Å–æ–±—ã—Ç–∏–π —Ä–∞–≤–Ω–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—é –∏—Ö –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π"
            self.explanation = f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–≤—É—Ö –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã—Ö —Å–æ–±—ã—Ç–∏–π P(A –∏ B) —Ä–∞–≤–Ω–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—é –∏—Ö –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π P(A) * P(B). P = (1/6) * (1/6) = {round((1/sides)**2, 3)}."
        elif self.difficulty == 3:
            total = random.randint(10, 15)
            red = random.randint(5, total - 2)
            self.prompt_text = (
                f"–í —É—Ä–Ω–µ {red} –∫—Ä–∞—Å–Ω—ã—Ö –∏ {total - red} —Å–∏–Ω–∏—Ö —à–∞—Ä–æ–≤. –ò–∑ —É—Ä–Ω—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –¥–æ—Å—Ç–∞—é—Ç –¥–≤–∞ —à–∞—Ä–∞. "
                f"–ö–∞–∫–æ–≤–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å, —á—Ç–æ –æ–±–∞ —à–∞—Ä–∞ –æ–∫–∞–∂—É—Ç—Å—è –∫—Ä–∞—Å–Ω—ã–º–∏? (–æ—Ç–≤–µ—Ç –æ–∫—Ä—É–≥–ª–∏—Ç–µ –¥–æ 3 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π)")
            p1 = red / total
            p2 = (red - 1) / (total - 1)
            self.solution = str(round(p1 * p2, 3))
            self.hint = "–≠—Ç–æ –∑–∞–≤–∏—Å–∏–º—ã–µ —Å–æ–±—ã—Ç–∏—è. P(A –∏ B) = P(A) * P(B|A)"
            self.explanation = f"–≠—Ç–æ –∑–∞–≤–∏—Å–∏–º—ã–µ —Å–æ–±—ã—Ç–∏—è. P(A –∏ B) = P(A) * P(B|A), –≥–¥–µ P(B|A) - –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—Ç–æ—Ä–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ. P = ({red}/{total}) * ({(red-1)}/{(total-1)}) = {round(p1 * p2, 3)}."

    def check_answer(self, user_answer):
        """–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —á–∏—Å–µ–ª —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π."""
        try:
            user_val = float(str(user_answer).replace(',', '.'))
            solution_val = float(self.solution)

            if math.isclose(user_val, solution_val, rel_tol=1e-3):
                return True, "üéâ –í–µ—Ä–Ω–æ!"

            hint = f"–ü–æ–¥—Å–∫–∞–∑–∫–∞: {self.explanation}"
            if user_val > 1 or user_val < 0:
                hint = "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 1 –∏–ª–∏ –º–µ–Ω—å—à–µ 0."
            elif math.isclose(user_val, 1 - solution_val):
                hint = "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ü–æ—Ö–æ–∂–µ, –≤—ã –Ω–∞—à–ª–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è."

            error_message = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ.\n   –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {self.solution}\n   {hint}"
            return False, error_message

        except ValueError:
            error_message = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ.\n   –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {self.solution}\n   üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º."
            return False, error_message


class Combinatoricstask(task):
    """–ó–∞–¥–∞—á–∞: –ö–æ–º–±–∏–Ω–∞—Ç–æ—Ä–∏–∫–∞."""

    def generate(self):
        if self.difficulty == 1:
            n = random.randint(4, 7)
            self.prompt_text = f"–°–∫–æ–ª—å–∫–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏ –º–æ–∂–Ω–æ —Ä–∞—Å—Å—Ç–∞–≤–∏—Ç—å {n} —Ä–∞–∑–Ω—ã—Ö –∫–Ω–∏–≥ –Ω–∞ –ø–æ–ª–∫–µ?"
            self.solution = str(math.factorial(n))
            self.hint = f"–≠—Ç–æ —á–∏—Å–ª–æ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–æ–∫, –∫–æ—Ç–æ—Ä–æ–µ —Ä–∞–≤–Ω–æ n! ({n}!)"
            self.explanation = f"–≠—Ç–æ —á–∏—Å–ª–æ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–æ–∫, –∫–æ—Ç–æ—Ä–æ–µ —Ä–∞–≤–Ω–æ n! ({n}!). {n}! = {math.factorial(n)}."
        elif self.difficulty == 2:
            n = random.randint(5, 10)
            k = random.randint(2, 4)
            self.prompt_text = f"–°–∫–æ–ª—å–∫–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å {k} —á–µ–ª–æ–≤–µ–∫–∞ –Ω–∞ {k} —Ä–∞–∑–Ω—ã–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∏–∑ {n} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤?"
            self.solution = str(math.perm(n, k))
            self.hint = "–ü–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω, –ø–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: A(n, k) = n! / (n-k)!"
            self.explanation = f"–ü–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω, –ø–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: A(n, k) = n! / (n-k)!. A({n}, {k}) = {n}! / ({n}-{k})! = {math.perm(n, k)}."
        elif self.difficulty == 3:
            n = random.randint(10, 15)
            k = random.randint(3, 5)
            self.prompt_text = f"–°–∫–æ–ª—å–∫–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –∏–∑ {k} —á–µ–ª–æ–≤–µ–∫ –∏–∑ –≥—Ä—É–ø–ø—ã –≤ {n} —á–µ–ª–æ–≤–µ–∫?"
            self.solution = str(math.comb(n, k))
            self.hint = "–ü–æ—Ä—è–¥–æ–∫ –Ω–µ –≤–∞–∂–µ–Ω, –ø–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—á–µ—Ç–∞–Ω–∏—è: C(n, k) = n! / (k! * (n-k)!)"
            self.explanation = f"–ü–æ—Ä—è–¥–æ–∫ –Ω–µ –≤–∞–∂–µ–Ω, –ø–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—á–µ—Ç–∞–Ω–∏—è: C(n, k) = n! / (k! * (n-k)!). C({n}, {k}) = {n}! / ({k}! * ({n}-{k})!) = {math.comb(n, k)}."
            self.n, self.k = n, k  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–≤–µ—Ç–∞

    def check_answer(self, user_answer):
        """–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ–±—ã –æ—Ç–ª–∏—á–∏—Ç—å —Å–æ—á–µ—Ç–∞–Ω–∏—è –æ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏–π."""
        user_answer_cleaned = str(user_answer).strip().replace(" ", "")
        if user_answer_cleaned == self.solution:
            return True, "üéâ –í–µ—Ä–Ω–æ!"

        hint = f"–ü–æ–¥—Å–∫–∞–∑–∫–∞: {self.explanation}"
        # –ê–Ω–∞–ª–∏–∑ –ø—É—Ç–∞–Ω–∏—Ü—ã –º–µ–∂–¥—É —Å–æ—á–µ—Ç–∞–Ω–∏—è–º–∏ –∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è–º–∏
        if self.difficulty == 3:
            try:
                user_val = int(user_answer_cleaned)
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å—á–∏—Ç–∞–ª —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ —Å–æ—á–µ—Ç–∞–Ω–∏–π
                if user_val == math.perm(self.n, self.k):
                    hint = "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –í—ã –ø–æ—Å—á–∏—Ç–∞–ª–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è (A), –∞ –Ω—É–∂–Ω—ã —Å–æ—á–µ—Ç–∞–Ω–∏—è (C). –ü–æ—Ä—è–¥–æ–∫ –≤ –∫–æ–º–∞–Ω–¥–µ –Ω–µ –≤–∞–∂–µ–Ω, –ø–æ—ç—Ç–æ–º—É –Ω—É–∂–Ω–æ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞ k!."
            except (ValueError, AttributeError):
                pass

        error_message = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ.\n   –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {self.solution}\n   {hint}"
        return False, error_message


class Sequencetask(task):
    """–ó–∞–¥–∞—á–∞: –ß–∏—Å–ª–æ–≤—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""

    def generate(self):
        start = random.randint(1, 10)
        if self.difficulty == 1:
            # –ê—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∞—è
            step = random.randint(2, 10)
            seq = [start + i * step for i in range(4)]
            self.prompt_text = f"–ù–∞–π–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —á–ª–µ–Ω –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {', '.join(map(str, seq))}, ..."
            self.solution = str(seq[-1] + step)
            self.hint = f"–≠—Ç–æ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—è —Å —à–∞–≥–æ–º {step}"
            self.explanation = f"–≠—Ç–æ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—è —Å —à–∞–≥–æ–º {step}. –ö–∞–∂–¥—ã–π —Å–ª–µ–¥—É—é—â–∏–π —á–ª–µ–Ω –ø–æ–ª—É—á–∞–µ—Ç—Å—è –ø—Ä–∏–±–∞–≤–ª–µ–Ω–∏–µ–º {step} –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É. –°–ª–µ–¥—É—é—â–∏–π —á–ª–µ–Ω: {seq[-1]} + {step} = {seq[-1] + step}."
        elif self.difficulty == 2:
            # –ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è
            ratio = random.randint(2, 3)
            seq = [start * (ratio ** i) for i in range(4)]
            self.prompt_text = f"–ù–∞–π–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —á–ª–µ–Ω –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {', '.join(map(str, seq))}, ..."
            self.solution = str(seq[-1] * ratio)
            self.hint = f"–≠—Ç–æ –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—è, –∫–∞–∂–¥—ã–π —á–ª–µ–Ω —É–º–Ω–æ–∂–∞–µ—Ç—Å—è –Ω–∞ {ratio}"
            self.explanation = f"–≠—Ç–æ –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—è, –∫–∞–∂–¥—ã–π —á–ª–µ–Ω —É–º–Ω–æ–∂–∞–µ—Ç—Å—è –Ω–∞ {ratio}. –°–ª–µ–¥—É—é—â–∏–π —á–ª–µ–Ω: {seq[-1]} * {ratio} = {seq[-1] * ratio}."
        elif self.difficulty == 3:
            # –ö–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–∞—è
            a = random.randint(2, 4)
            b = random.randint(1, 5)
            seq = [a * (n ** 2) + b for n in range(1, 5)]
            self.prompt_text = f"–ù–∞–π–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —á–ª–µ–Ω –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {', '.join(map(str, seq))}, ..."
            self.solution = str(a * (5 ** 2) + b)
            self.hint = f"–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–¥–∞–Ω–∞ —Ñ–æ—Ä–º—É–ª–æ–π a*n^2 + b, –≥–¥–µ n - –Ω–æ–º–µ—Ä —á–ª–µ–Ω–∞"
            self.explanation = f"–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–¥–∞–Ω–∞ —Ñ–æ—Ä–º—É–ª–æ–π a*n^2 + b, –≥–¥–µ n - –Ω–æ–º–µ—Ä —á–ª–µ–Ω–∞. –ó–¥–µ—Å—å a={a}, b={b}. –°–ª–µ–¥—É—é—â–∏–π —á–ª–µ–Ω (n=5): {a}*5^2 + {b} = {a * 25} + {b} = {a * (5 ** 2) + b}."


# --- –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≥—Ä–∞–º–º—ã ---

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    task_map = {
        "1": ("–ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–∏", Derivativetask),
        "2": ("–†–µ—à–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É—Ä–∞–≤–Ω–µ–Ω–∏–π", LinearSystemtask),
        "3": ("–¢–µ–æ—Ä–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π", Probabilitytask),
        "4": ("–ö–æ–º–±–∏–Ω–∞—Ç–æ—Ä–∏–∫–∞", Combinatoricstask),
        "5": ("–ß–∏—Å–ª–æ–≤—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", Sequencetask)
    }

    print("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —Ä–µ—à–µ–Ω–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á!")
    while True:
        print("\n" + "=" * 30)
        print("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á–∏:")
        for key, (name, _) in task_map.items():
            print(f"  {key}. {name}")

        task_choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ (–∏–ª–∏ 'q' –¥–ª—è –≤—ã—Ö–æ–¥–∞): ").strip()
        if task_choice.lower() == 'q':
            print("–î–æ –≤—Å—Ç—Ä–µ—á–∏!")
            break
        if task_choice not in task_map:
            print("üö® –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            continue

        try:
            difficulty_choice = int(input("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (1-3): ").strip())
            if difficulty_choice not in [1, 2, 3]: raise ValueError
        except ValueError:
            print("üö® –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 3.")
            continue

        task_name, task_class = task_map[task_choice]
        current_task = task_class(difficulty=difficulty_choice)

        print("\n--- –ó–ê–î–ê–ß–ê ---")
        print(current_task.get_prompt())
        print("-" * 14)
        
        # –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞
        user_answer = input("–í–∞—à –æ—Ç–≤–µ—Ç (1-—è –ø–æ–ø—ã—Ç–∫–∞): ")
        is_correct, message = current_task.check_answer(user_answer)
        
        if is_correct:
            print("üéâ –û—Ç–ª–∏—á–Ω–æ! –í—ã —Ä–µ—à–∏–ª–∏ –∑–∞–¥–∞—á—É —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏!")
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–¥—Å–∫–∞–∑–∫—É –±–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            print("‚ùå –ù–µ–≤–µ—Ä–Ω–æ.")
            print(f"üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: {current_task.hint}")
            
            # –í—Ç–æ—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞
            print("\nüí° –£ –≤–∞—Å –µ—Å—Ç—å –µ—â–µ –æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞!")
            user_answer = input("–í–∞—à –æ—Ç–≤–µ—Ç (2-—è –ø–æ–ø—ã—Ç–∫–∞): ")
            is_correct, message = current_task.check_answer(user_answer)
            print(message)

        input("\n–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...")


if __name__ == "__main__":
    main()